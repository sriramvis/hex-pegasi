// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply plugin: 'com.android.application'


android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 22

        buildConfigField "boolean", "IS_CN_VERSION", "false"
    }

    productFlavors {
        china {
            applicationId "com.cmcm.ads_cn"
            buildConfigField "boolean", "IS_CN_VERSION", "true"
        }
        world {
            applicationId "com.cmcm.ads"
            buildConfigField "boolean", "IS_CN_VERSION", "false"

        }
    }

    sourceSets {
        world() {
            java.srcDirs = ['src/world_all/java']
            res.srcDirs = ['src/world_all/res']
        }
    }

    signingConfigs {
        releaseConfig {
            keyAlias 'cmmobsample'
            keyPassword '123456'
            storeFile file('cmmob.keystore')
            storePassword '123456'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles 'proguard-project.txt'
            signingConfig signingConfigs.releaseConfig
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}


dependencies {
    chinaCompile(name: 'cmadsdk_base_china_V3.3.0', ext: 'aar')
    worldCompile(name: 'cmadsdk_base_world_V3.3.0', ext: 'aar')
    compile 'com.android.support:support-v4:22.2.0'
    compile files('libs/volley.jar')
}

/**
 * 系统打包的默认目录
 */
def gAssembleApkPath = ''
android.applicationVariants.all { variant ->
    if (variant.buildType.name.equals('release')) {
        variant.outputs.each { output ->
            gAssembleApkPath = output.packageApplication.outputFile.parent
            println 'gAssembleApkPath is ' + gAssembleApkPath
        }
    }
}


assembleRelease.doLast {
    copy {
        from gAssembleApkPath
        into getAARDesfolder()
        include '*.apk'
        exclude '*unaligned*'
    }
}

